<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Emporium</title>
    <link>https://jj-coding-emporium.github.io/</link>
    <description>Recent content on Coding Emporium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Dec 2018 19:40:26 -0800</lastBuildDate>
    
	<atom:link href="https://jj-coding-emporium.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monad</title>
      <link>https://jj-coding-emporium.github.io/posts/monad/</link>
      <pubDate>Fri, 07 Dec 2018 19:40:26 -0800</pubDate>
      
      <guid>https://jj-coding-emporium.github.io/posts/monad/</guid>
      <description>Disclaimer: I don&amp;rsquo;t understand monads. Which is why I&amp;rsquo;m blogging about them - perhaps I&amp;rsquo;ll understand them by the time I&amp;rsquo;m done. And perhaps you will too!
The history of the programming monad Monads were first introduced to the programming realm by the language designers of Haskell, who were grappling with the thorny problem of IO for a pure functional programming language. What&amp;rsquo;s this problem, you ask? Well, pure languages are, by strict definition, not allowed to have or mutate state.</description>
    </item>
    
    <item>
      <title>Concurrency: Go vs. Node</title>
      <link>https://jj-coding-emporium.github.io/posts/concurrency-go-vs-node/</link>
      <pubDate>Tue, 27 Nov 2018 08:13:10 -0800</pubDate>
      
      <guid>https://jj-coding-emporium.github.io/posts/concurrency-go-vs-node/</guid>
      <description>Go 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/gorilla/mux&amp;#34; ) func getUser(username string) string { response, _ := http.Get(&amp;#34;https://api.github.com/users/&amp;#34; + username) responseData, _ := ioutil.ReadAll(response.Body) userData := string(responseData) return userData } func GithubHandler(w http.ResponseWriter, req *http.Request) { params := mux.</description>
    </item>
    
  </channel>
</rss>